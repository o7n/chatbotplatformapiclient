<?php
/**
 * RegexApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OBI4wan Bots API
 *
 * Documentation for the OBI4wan BOTS API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * RegexApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RegexApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation chatbotChatbotIDRegexDelete
     *
     * Delete a all training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function chatbotChatbotIDRegexDelete($chatbot_id)
    {
        $this->chatbotChatbotIDRegexDeleteWithHttpInfo($chatbot_id);
    }

    /**
     * Operation chatbotChatbotIDRegexDeleteWithHttpInfo
     *
     * Delete a all training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDRegexDeleteWithHttpInfo($chatbot_id)
    {
        $request = $this->chatbotChatbotIDRegexDeleteRequest($chatbot_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDRegexDeleteAsync
     *
     * Delete a all training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexDeleteAsync($chatbot_id)
    {
        return $this->chatbotChatbotIDRegexDeleteAsyncWithHttpInfo($chatbot_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDRegexDeleteAsyncWithHttpInfo
     *
     * Delete a all training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexDeleteAsyncWithHttpInfo($chatbot_id)
    {
        $returnType = '';
        $request = $this->chatbotChatbotIDRegexDeleteRequest($chatbot_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDRegexDelete'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDRegexDeleteRequest($chatbot_id)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDRegexDelete'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/regex';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDRegexGet
     *
     * Returns all training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RegexFeature[]
     */
    public function chatbotChatbotIDRegexGet($chatbot_id)
    {
        list($response) = $this->chatbotChatbotIDRegexGetWithHttpInfo($chatbot_id);
        return $response;
    }

    /**
     * Operation chatbotChatbotIDRegexGetWithHttpInfo
     *
     * Returns all training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RegexFeature[], HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDRegexGetWithHttpInfo($chatbot_id)
    {
        $request = $this->chatbotChatbotIDRegexGetRequest($chatbot_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RegexFeature[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RegexFeature[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RegexFeature[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RegexFeature[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDRegexGetAsync
     *
     * Returns all training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexGetAsync($chatbot_id)
    {
        return $this->chatbotChatbotIDRegexGetAsyncWithHttpInfo($chatbot_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDRegexGetAsyncWithHttpInfo
     *
     * Returns all training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexGetAsyncWithHttpInfo($chatbot_id)
    {
        $returnType = '\OpenAPI\Client\Model\RegexFeature[]';
        $request = $this->chatbotChatbotIDRegexGetRequest($chatbot_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDRegexGet'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDRegexGetRequest($chatbot_id)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDRegexGet'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/regex';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDRegexPost
     *
     * Create a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  \OpenAPI\Client\Model\RegexFeature $regex_feature regex_feature (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RegexFeature
     */
    public function chatbotChatbotIDRegexPost($chatbot_id, $regex_feature)
    {
        list($response) = $this->chatbotChatbotIDRegexPostWithHttpInfo($chatbot_id, $regex_feature);
        return $response;
    }

    /**
     * Operation chatbotChatbotIDRegexPostWithHttpInfo
     *
     * Create a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  \OpenAPI\Client\Model\RegexFeature $regex_feature (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RegexFeature, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDRegexPostWithHttpInfo($chatbot_id, $regex_feature)
    {
        $request = $this->chatbotChatbotIDRegexPostRequest($chatbot_id, $regex_feature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RegexFeature' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RegexFeature', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RegexFeature';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RegexFeature',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDRegexPostAsync
     *
     * Create a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  \OpenAPI\Client\Model\RegexFeature $regex_feature (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexPostAsync($chatbot_id, $regex_feature)
    {
        return $this->chatbotChatbotIDRegexPostAsyncWithHttpInfo($chatbot_id, $regex_feature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDRegexPostAsyncWithHttpInfo
     *
     * Create a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  \OpenAPI\Client\Model\RegexFeature $regex_feature (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexPostAsyncWithHttpInfo($chatbot_id, $regex_feature)
    {
        $returnType = '\OpenAPI\Client\Model\RegexFeature';
        $request = $this->chatbotChatbotIDRegexPostRequest($chatbot_id, $regex_feature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDRegexPost'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  \OpenAPI\Client\Model\RegexFeature $regex_feature (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDRegexPostRequest($chatbot_id, $regex_feature)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDRegexPost'
            );
        }
        // verify the required parameter 'regex_feature' is set
        if ($regex_feature === null || (is_array($regex_feature) && count($regex_feature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $regex_feature when calling chatbotChatbotIDRegexPost'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/regex';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($regex_feature)) {
            $_tempBody = $regex_feature;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDDelete
     *
     * Delete a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function chatbotChatbotIDRegexRegexIDDelete($chatbot_id, $regex_id)
    {
        $this->chatbotChatbotIDRegexRegexIDDeleteWithHttpInfo($chatbot_id, $regex_id);
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDDeleteWithHttpInfo
     *
     * Delete a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDRegexRegexIDDeleteWithHttpInfo($chatbot_id, $regex_id)
    {
        $request = $this->chatbotChatbotIDRegexRegexIDDeleteRequest($chatbot_id, $regex_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDDeleteAsync
     *
     * Delete a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexRegexIDDeleteAsync($chatbot_id, $regex_id)
    {
        return $this->chatbotChatbotIDRegexRegexIDDeleteAsyncWithHttpInfo($chatbot_id, $regex_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDDeleteAsyncWithHttpInfo
     *
     * Delete a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexRegexIDDeleteAsyncWithHttpInfo($chatbot_id, $regex_id)
    {
        $returnType = '';
        $request = $this->chatbotChatbotIDRegexRegexIDDeleteRequest($chatbot_id, $regex_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDRegexRegexIDDelete'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDRegexRegexIDDeleteRequest($chatbot_id, $regex_id)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDRegexRegexIDDelete'
            );
        }
        // verify the required parameter 'regex_id' is set
        if ($regex_id === null || (is_array($regex_id) && count($regex_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $regex_id when calling chatbotChatbotIDRegexRegexIDDelete'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/regex/{RegexID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }
        // path params
        if ($regex_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RegexID' . '}',
                ObjectSerializer::toPathValue($regex_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDGet
     *
     * Get a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RegexFeature
     */
    public function chatbotChatbotIDRegexRegexIDGet($chatbot_id, $regex_id)
    {
        list($response) = $this->chatbotChatbotIDRegexRegexIDGetWithHttpInfo($chatbot_id, $regex_id);
        return $response;
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDGetWithHttpInfo
     *
     * Get a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RegexFeature, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDRegexRegexIDGetWithHttpInfo($chatbot_id, $regex_id)
    {
        $request = $this->chatbotChatbotIDRegexRegexIDGetRequest($chatbot_id, $regex_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RegexFeature' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RegexFeature', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RegexFeature';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RegexFeature',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDGetAsync
     *
     * Get a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexRegexIDGetAsync($chatbot_id, $regex_id)
    {
        return $this->chatbotChatbotIDRegexRegexIDGetAsyncWithHttpInfo($chatbot_id, $regex_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDGetAsyncWithHttpInfo
     *
     * Get a specific training regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexRegexIDGetAsyncWithHttpInfo($chatbot_id, $regex_id)
    {
        $returnType = '\OpenAPI\Client\Model\RegexFeature';
        $request = $this->chatbotChatbotIDRegexRegexIDGetRequest($chatbot_id, $regex_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDRegexRegexIDGet'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDRegexRegexIDGetRequest($chatbot_id, $regex_id)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDRegexRegexIDGet'
            );
        }
        // verify the required parameter 'regex_id' is set
        if ($regex_id === null || (is_array($regex_id) && count($regex_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $regex_id when calling chatbotChatbotIDRegexRegexIDGet'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/regex/{RegexID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }
        // path params
        if ($regex_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RegexID' . '}',
                ObjectSerializer::toPathValue($regex_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDPut
     *
     * Returns a specific Regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     * @param  \OpenAPI\Client\Model\RegexFeature $regex_feature regex_feature (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RegexFeature
     */
    public function chatbotChatbotIDRegexRegexIDPut($chatbot_id, $regex_id, $regex_feature)
    {
        list($response) = $this->chatbotChatbotIDRegexRegexIDPutWithHttpInfo($chatbot_id, $regex_id, $regex_feature);
        return $response;
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDPutWithHttpInfo
     *
     * Returns a specific Regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     * @param  \OpenAPI\Client\Model\RegexFeature $regex_feature (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RegexFeature, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDRegexRegexIDPutWithHttpInfo($chatbot_id, $regex_id, $regex_feature)
    {
        $request = $this->chatbotChatbotIDRegexRegexIDPutRequest($chatbot_id, $regex_id, $regex_feature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RegexFeature' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RegexFeature', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RegexFeature';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RegexFeature',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDPutAsync
     *
     * Returns a specific Regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     * @param  \OpenAPI\Client\Model\RegexFeature $regex_feature (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexRegexIDPutAsync($chatbot_id, $regex_id, $regex_feature)
    {
        return $this->chatbotChatbotIDRegexRegexIDPutAsyncWithHttpInfo($chatbot_id, $regex_id, $regex_feature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDRegexRegexIDPutAsyncWithHttpInfo
     *
     * Returns a specific Regex
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     * @param  \OpenAPI\Client\Model\RegexFeature $regex_feature (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDRegexRegexIDPutAsyncWithHttpInfo($chatbot_id, $regex_id, $regex_feature)
    {
        $returnType = '\OpenAPI\Client\Model\RegexFeature';
        $request = $this->chatbotChatbotIDRegexRegexIDPutRequest($chatbot_id, $regex_id, $regex_feature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDRegexRegexIDPut'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $regex_id Pass in a RegexID to identify the Regex. (required)
     * @param  \OpenAPI\Client\Model\RegexFeature $regex_feature (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDRegexRegexIDPutRequest($chatbot_id, $regex_id, $regex_feature)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDRegexRegexIDPut'
            );
        }
        // verify the required parameter 'regex_id' is set
        if ($regex_id === null || (is_array($regex_id) && count($regex_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $regex_id when calling chatbotChatbotIDRegexRegexIDPut'
            );
        }
        // verify the required parameter 'regex_feature' is set
        if ($regex_feature === null || (is_array($regex_feature) && count($regex_feature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $regex_feature when calling chatbotChatbotIDRegexRegexIDPut'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/regex/{RegexID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }
        // path params
        if ($regex_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RegexID' . '}',
                ObjectSerializer::toPathValue($regex_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($regex_feature)) {
            $_tempBody = $regex_feature;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
