<?php
/**
 * ConversationsApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OBI4wan Bots API
 *
 * Documentation for the OBI4wan BOTS API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ConversationsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConversationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDDelete
     *
     * Delete a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function chatbotChatbotIDConversationsConversationIDDelete($chatbot_id, $conversation_id)
    {
        $this->chatbotChatbotIDConversationsConversationIDDeleteWithHttpInfo($chatbot_id, $conversation_id);
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDDeleteWithHttpInfo
     *
     * Delete a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDConversationsConversationIDDeleteWithHttpInfo($chatbot_id, $conversation_id)
    {
        $request = $this->chatbotChatbotIDConversationsConversationIDDeleteRequest($chatbot_id, $conversation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDDeleteAsync
     *
     * Delete a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsConversationIDDeleteAsync($chatbot_id, $conversation_id)
    {
        return $this->chatbotChatbotIDConversationsConversationIDDeleteAsyncWithHttpInfo($chatbot_id, $conversation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDDeleteAsyncWithHttpInfo
     *
     * Delete a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsConversationIDDeleteAsyncWithHttpInfo($chatbot_id, $conversation_id)
    {
        $returnType = '';
        $request = $this->chatbotChatbotIDConversationsConversationIDDeleteRequest($chatbot_id, $conversation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDConversationsConversationIDDelete'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDConversationsConversationIDDeleteRequest($chatbot_id, $conversation_id)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDConversationsConversationIDDelete'
            );
        }
        // verify the required parameter 'conversation_id' is set
        if ($conversation_id === null || (is_array($conversation_id) && count($conversation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversation_id when calling chatbotChatbotIDConversationsConversationIDDelete'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/conversations/{conversationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }
        // path params
        if ($conversation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'conversationID' . '}',
                ObjectSerializer::toPathValue($conversation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDGet
     *
     * Get a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Conversation
     */
    public function chatbotChatbotIDConversationsConversationIDGet($chatbot_id, $conversation_id)
    {
        list($response) = $this->chatbotChatbotIDConversationsConversationIDGetWithHttpInfo($chatbot_id, $conversation_id);
        return $response;
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDGetWithHttpInfo
     *
     * Get a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Conversation, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDConversationsConversationIDGetWithHttpInfo($chatbot_id, $conversation_id)
    {
        $request = $this->chatbotChatbotIDConversationsConversationIDGetRequest($chatbot_id, $conversation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Conversation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Conversation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Conversation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Conversation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDGetAsync
     *
     * Get a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsConversationIDGetAsync($chatbot_id, $conversation_id)
    {
        return $this->chatbotChatbotIDConversationsConversationIDGetAsyncWithHttpInfo($chatbot_id, $conversation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDGetAsyncWithHttpInfo
     *
     * Get a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsConversationIDGetAsyncWithHttpInfo($chatbot_id, $conversation_id)
    {
        $returnType = '\OpenAPI\Client\Model\Conversation';
        $request = $this->chatbotChatbotIDConversationsConversationIDGetRequest($chatbot_id, $conversation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDConversationsConversationIDGet'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDConversationsConversationIDGetRequest($chatbot_id, $conversation_id)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDConversationsConversationIDGet'
            );
        }
        // verify the required parameter 'conversation_id' is set
        if ($conversation_id === null || (is_array($conversation_id) && count($conversation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversation_id when calling chatbotChatbotIDConversationsConversationIDGet'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/conversations/{conversationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }
        // path params
        if ($conversation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'conversationID' . '}',
                ObjectSerializer::toPathValue($conversation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDPut
     *
     * Returns a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     * @param  \OpenAPI\Client\Model\Conversation $conversation conversation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Conversation
     */
    public function chatbotChatbotIDConversationsConversationIDPut($chatbot_id, $conversation_id, $conversation)
    {
        list($response) = $this->chatbotChatbotIDConversationsConversationIDPutWithHttpInfo($chatbot_id, $conversation_id, $conversation);
        return $response;
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDPutWithHttpInfo
     *
     * Returns a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     * @param  \OpenAPI\Client\Model\Conversation $conversation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Conversation, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDConversationsConversationIDPutWithHttpInfo($chatbot_id, $conversation_id, $conversation)
    {
        $request = $this->chatbotChatbotIDConversationsConversationIDPutRequest($chatbot_id, $conversation_id, $conversation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Conversation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Conversation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Conversation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Conversation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDPutAsync
     *
     * Returns a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     * @param  \OpenAPI\Client\Model\Conversation $conversation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsConversationIDPutAsync($chatbot_id, $conversation_id, $conversation)
    {
        return $this->chatbotChatbotIDConversationsConversationIDPutAsyncWithHttpInfo($chatbot_id, $conversation_id, $conversation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDConversationsConversationIDPutAsyncWithHttpInfo
     *
     * Returns a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     * @param  \OpenAPI\Client\Model\Conversation $conversation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsConversationIDPutAsyncWithHttpInfo($chatbot_id, $conversation_id, $conversation)
    {
        $returnType = '\OpenAPI\Client\Model\Conversation';
        $request = $this->chatbotChatbotIDConversationsConversationIDPutRequest($chatbot_id, $conversation_id, $conversation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDConversationsConversationIDPut'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $conversation_id Pass in a conversationID to identify the Conversations. (required)
     * @param  \OpenAPI\Client\Model\Conversation $conversation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDConversationsConversationIDPutRequest($chatbot_id, $conversation_id, $conversation)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDConversationsConversationIDPut'
            );
        }
        // verify the required parameter 'conversation_id' is set
        if ($conversation_id === null || (is_array($conversation_id) && count($conversation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversation_id when calling chatbotChatbotIDConversationsConversationIDPut'
            );
        }
        // verify the required parameter 'conversation' is set
        if ($conversation === null || (is_array($conversation) && count($conversation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversation when calling chatbotChatbotIDConversationsConversationIDPut'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/conversations/{conversationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }
        // path params
        if ($conversation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'conversationID' . '}',
                ObjectSerializer::toPathValue($conversation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($conversation)) {
            $_tempBody = $conversation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDConversationsDelete
     *
     * Delete a all Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function chatbotChatbotIDConversationsDelete($chatbot_id)
    {
        $this->chatbotChatbotIDConversationsDeleteWithHttpInfo($chatbot_id);
    }

    /**
     * Operation chatbotChatbotIDConversationsDeleteWithHttpInfo
     *
     * Delete a all Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDConversationsDeleteWithHttpInfo($chatbot_id)
    {
        $request = $this->chatbotChatbotIDConversationsDeleteRequest($chatbot_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDConversationsDeleteAsync
     *
     * Delete a all Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsDeleteAsync($chatbot_id)
    {
        return $this->chatbotChatbotIDConversationsDeleteAsyncWithHttpInfo($chatbot_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDConversationsDeleteAsyncWithHttpInfo
     *
     * Delete a all Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsDeleteAsyncWithHttpInfo($chatbot_id)
    {
        $returnType = '';
        $request = $this->chatbotChatbotIDConversationsDeleteRequest($chatbot_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDConversationsDelete'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDConversationsDeleteRequest($chatbot_id)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDConversationsDelete'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/conversations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDConversationsGet
     *
     * Returns all Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Conversation[]
     */
    public function chatbotChatbotIDConversationsGet($chatbot_id)
    {
        list($response) = $this->chatbotChatbotIDConversationsGetWithHttpInfo($chatbot_id);
        return $response;
    }

    /**
     * Operation chatbotChatbotIDConversationsGetWithHttpInfo
     *
     * Returns all Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Conversation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDConversationsGetWithHttpInfo($chatbot_id)
    {
        $request = $this->chatbotChatbotIDConversationsGetRequest($chatbot_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Conversation[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Conversation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Conversation[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Conversation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDConversationsGetAsync
     *
     * Returns all Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsGetAsync($chatbot_id)
    {
        return $this->chatbotChatbotIDConversationsGetAsyncWithHttpInfo($chatbot_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDConversationsGetAsyncWithHttpInfo
     *
     * Returns all Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsGetAsyncWithHttpInfo($chatbot_id)
    {
        $returnType = '\OpenAPI\Client\Model\Conversation[]';
        $request = $this->chatbotChatbotIDConversationsGetRequest($chatbot_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDConversationsGet'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDConversationsGetRequest($chatbot_id)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDConversationsGet'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/conversations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDConversationsPost
     *
     * Create a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  \OpenAPI\Client\Model\Conversation $conversation conversation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Conversation
     */
    public function chatbotChatbotIDConversationsPost($chatbot_id, $conversation)
    {
        list($response) = $this->chatbotChatbotIDConversationsPostWithHttpInfo($chatbot_id, $conversation);
        return $response;
    }

    /**
     * Operation chatbotChatbotIDConversationsPostWithHttpInfo
     *
     * Create a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  \OpenAPI\Client\Model\Conversation $conversation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Conversation, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDConversationsPostWithHttpInfo($chatbot_id, $conversation)
    {
        $request = $this->chatbotChatbotIDConversationsPostRequest($chatbot_id, $conversation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Conversation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Conversation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Conversation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Conversation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDConversationsPostAsync
     *
     * Create a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  \OpenAPI\Client\Model\Conversation $conversation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsPostAsync($chatbot_id, $conversation)
    {
        return $this->chatbotChatbotIDConversationsPostAsyncWithHttpInfo($chatbot_id, $conversation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDConversationsPostAsyncWithHttpInfo
     *
     * Create a specific Conversations
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  \OpenAPI\Client\Model\Conversation $conversation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDConversationsPostAsyncWithHttpInfo($chatbot_id, $conversation)
    {
        $returnType = '\OpenAPI\Client\Model\Conversation';
        $request = $this->chatbotChatbotIDConversationsPostRequest($chatbot_id, $conversation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDConversationsPost'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  \OpenAPI\Client\Model\Conversation $conversation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDConversationsPostRequest($chatbot_id, $conversation)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDConversationsPost'
            );
        }
        // verify the required parameter 'conversation' is set
        if ($conversation === null || (is_array($conversation) && count($conversation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversation when calling chatbotChatbotIDConversationsPost'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/conversations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($conversation)) {
            $_tempBody = $conversation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatbotChatbotIDTurnsTurnIdPut
     *
     * Modifies a turn
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $turn_id Pass in a turnId to identify the turn. (required)
     * @param  \OpenAPI\Client\Model\ConversationTurn $conversation_turn conversation_turn (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Conversation
     */
    public function chatbotChatbotIDTurnsTurnIdPut($chatbot_id, $turn_id, $conversation_turn)
    {
        list($response) = $this->chatbotChatbotIDTurnsTurnIdPutWithHttpInfo($chatbot_id, $turn_id, $conversation_turn);
        return $response;
    }

    /**
     * Operation chatbotChatbotIDTurnsTurnIdPutWithHttpInfo
     *
     * Modifies a turn
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $turn_id Pass in a turnId to identify the turn. (required)
     * @param  \OpenAPI\Client\Model\ConversationTurn $conversation_turn (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Conversation, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatbotChatbotIDTurnsTurnIdPutWithHttpInfo($chatbot_id, $turn_id, $conversation_turn)
    {
        $request = $this->chatbotChatbotIDTurnsTurnIdPutRequest($chatbot_id, $turn_id, $conversation_turn);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Conversation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Conversation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Conversation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Conversation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatbotChatbotIDTurnsTurnIdPutAsync
     *
     * Modifies a turn
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $turn_id Pass in a turnId to identify the turn. (required)
     * @param  \OpenAPI\Client\Model\ConversationTurn $conversation_turn (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDTurnsTurnIdPutAsync($chatbot_id, $turn_id, $conversation_turn)
    {
        return $this->chatbotChatbotIDTurnsTurnIdPutAsyncWithHttpInfo($chatbot_id, $turn_id, $conversation_turn)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatbotChatbotIDTurnsTurnIdPutAsyncWithHttpInfo
     *
     * Modifies a turn
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $turn_id Pass in a turnId to identify the turn. (required)
     * @param  \OpenAPI\Client\Model\ConversationTurn $conversation_turn (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatbotChatbotIDTurnsTurnIdPutAsyncWithHttpInfo($chatbot_id, $turn_id, $conversation_turn)
    {
        $returnType = '\OpenAPI\Client\Model\Conversation';
        $request = $this->chatbotChatbotIDTurnsTurnIdPutRequest($chatbot_id, $turn_id, $conversation_turn);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatbotChatbotIDTurnsTurnIdPut'
     *
     * @param  string $chatbot_id Pass in a chatbotID to identify the chatbot. (required)
     * @param  string $turn_id Pass in a turnId to identify the turn. (required)
     * @param  \OpenAPI\Client\Model\ConversationTurn $conversation_turn (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chatbotChatbotIDTurnsTurnIdPutRequest($chatbot_id, $turn_id, $conversation_turn)
    {
        // verify the required parameter 'chatbot_id' is set
        if ($chatbot_id === null || (is_array($chatbot_id) && count($chatbot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chatbot_id when calling chatbotChatbotIDTurnsTurnIdPut'
            );
        }
        // verify the required parameter 'turn_id' is set
        if ($turn_id === null || (is_array($turn_id) && count($turn_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $turn_id when calling chatbotChatbotIDTurnsTurnIdPut'
            );
        }
        // verify the required parameter 'conversation_turn' is set
        if ($conversation_turn === null || (is_array($conversation_turn) && count($conversation_turn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversation_turn when calling chatbotChatbotIDTurnsTurnIdPut'
            );
        }

        $resourcePath = '/chatbot/{chatbotID}/turns/{turnId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($chatbot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chatbotID' . '}',
                ObjectSerializer::toPathValue($chatbot_id),
                $resourcePath
            );
        }
        // path params
        if ($turn_id !== null) {
            $resourcePath = str_replace(
                '{' . 'turnId' . '}',
                ObjectSerializer::toPathValue($turn_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($conversation_turn)) {
            $_tempBody = $conversation_turn;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
