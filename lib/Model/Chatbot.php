<?php
/**
 * Chatbot
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OBI4wan Bots API
 *
 * Documentation for the OBI4wan BOTS API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Chatbot Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Chatbot implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Chatbot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'date_created' => 'string',
        'language_models' => '\OpenAPI\Client\Model\LanguageModel[]',
        'project' => 'string',
        'threshold' => 'float',
        'deployed' => 'bool',
        'date_deployed' => 'string',
        'dev_chatbot_id' => 'string',
        'forbidden_goal_intents' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'date_created' => null,
        'language_models' => null,
        'project' => null,
        'threshold' => null,
        'deployed' => null,
        'date_deployed' => null,
        'dev_chatbot_id' => null,
        'forbidden_goal_intents' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'date_created' => 'date_created',
        'language_models' => 'language_models',
        'project' => 'project',
        'threshold' => 'threshold',
        'deployed' => 'deployed',
        'date_deployed' => 'date_deployed',
        'dev_chatbot_id' => 'dev_chatbot_id',
        'forbidden_goal_intents' => 'forbidden_goal_intents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'date_created' => 'setDateCreated',
        'language_models' => 'setLanguageModels',
        'project' => 'setProject',
        'threshold' => 'setThreshold',
        'deployed' => 'setDeployed',
        'date_deployed' => 'setDateDeployed',
        'dev_chatbot_id' => 'setDevChatbotId',
        'forbidden_goal_intents' => 'setForbiddenGoalIntents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'date_created' => 'getDateCreated',
        'language_models' => 'getLanguageModels',
        'project' => 'getProject',
        'threshold' => 'getThreshold',
        'deployed' => 'getDeployed',
        'date_deployed' => 'getDateDeployed',
        'dev_chatbot_id' => 'getDevChatbotId',
        'forbidden_goal_intents' => 'getForbiddenGoalIntents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['language_models'] = isset($data['language_models']) ? $data['language_models'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['threshold'] = isset($data['threshold']) ? $data['threshold'] : null;
        $this->container['deployed'] = isset($data['deployed']) ? $data['deployed'] : null;
        $this->container['date_deployed'] = isset($data['date_deployed']) ? $data['date_deployed'] : null;
        $this->container['dev_chatbot_id'] = isset($data['dev_chatbot_id']) ? $data['dev_chatbot_id'] : null;
        $this->container['forbidden_goal_intents'] = isset($data['forbidden_goal_intents']) ? $data['forbidden_goal_intents'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets language_models
     *
     * @return \OpenAPI\Client\Model\LanguageModel[]|null
     */
    public function getLanguageModels()
    {
        return $this->container['language_models'];
    }

    /**
     * Sets language_models
     *
     * @param \OpenAPI\Client\Model\LanguageModel[]|null $language_models language_models
     *
     * @return $this
     */
    public function setLanguageModels($language_models)
    {
        $this->container['language_models'] = $language_models;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string|null $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return float|null
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param float|null $threshold threshold
     *
     * @return $this
     */
    public function setThreshold($threshold)
    {
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets deployed
     *
     * @return bool|null
     */
    public function getDeployed()
    {
        return $this->container['deployed'];
    }

    /**
     * Sets deployed
     *
     * @param bool|null $deployed deployed
     *
     * @return $this
     */
    public function setDeployed($deployed)
    {
        $this->container['deployed'] = $deployed;

        return $this;
    }

    /**
     * Gets date_deployed
     *
     * @return string|null
     */
    public function getDateDeployed()
    {
        return $this->container['date_deployed'];
    }

    /**
     * Sets date_deployed
     *
     * @param string|null $date_deployed date_deployed
     *
     * @return $this
     */
    public function setDateDeployed($date_deployed)
    {
        $this->container['date_deployed'] = $date_deployed;

        return $this;
    }

    /**
     * Gets dev_chatbot_id
     *
     * @return string|null
     */
    public function getDevChatbotId()
    {
        return $this->container['dev_chatbot_id'];
    }

    /**
     * Sets dev_chatbot_id
     *
     * @param string|null $dev_chatbot_id dev_chatbot_id
     *
     * @return $this
     */
    public function setDevChatbotId($dev_chatbot_id)
    {
        $this->container['dev_chatbot_id'] = $dev_chatbot_id;

        return $this;
    }

    /**
     * Gets forbidden_goal_intents
     *
     * @return string[]|null
     */
    public function getForbiddenGoalIntents()
    {
        return $this->container['forbidden_goal_intents'];
    }

    /**
     * Sets forbidden_goal_intents
     *
     * @param string[]|null $forbidden_goal_intents forbidden_goal_intents
     *
     * @return $this
     */
    public function setForbiddenGoalIntents($forbidden_goal_intents)
    {
        $this->container['forbidden_goal_intents'] = $forbidden_goal_intents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


