<?php
/**
 * CompleteChatbot
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OBI4wan Bots API
 *
 * Documentation for the OBI4wan BOTS API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CompleteChatbot Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CompleteChatbot implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompleteChatbot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'general_info' => '\OpenAPI\Client\Model\Chatbot',
        'examples' => '\OpenAPI\Client\Model\TrainingExample[]',
        'regex' => '\OpenAPI\Client\Model\RegexFeature[]',
        'expressions' => '\OpenAPI\Client\Model\Expression[]',
        'test_examples' => '\OpenAPI\Client\Model\TestExample[]',
        'conversations' => '\OpenAPI\Client\Model\Conversation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'general_info' => null,
        'examples' => null,
        'regex' => null,
        'expressions' => null,
        'test_examples' => null,
        'conversations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'general_info' => 'general_info',
        'examples' => 'examples',
        'regex' => 'regex',
        'expressions' => 'expressions',
        'test_examples' => 'test_examples',
        'conversations' => 'conversations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'general_info' => 'setGeneralInfo',
        'examples' => 'setExamples',
        'regex' => 'setRegex',
        'expressions' => 'setExpressions',
        'test_examples' => 'setTestExamples',
        'conversations' => 'setConversations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'general_info' => 'getGeneralInfo',
        'examples' => 'getExamples',
        'regex' => 'getRegex',
        'expressions' => 'getExpressions',
        'test_examples' => 'getTestExamples',
        'conversations' => 'getConversations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['general_info'] = isset($data['general_info']) ? $data['general_info'] : null;
        $this->container['examples'] = isset($data['examples']) ? $data['examples'] : null;
        $this->container['regex'] = isset($data['regex']) ? $data['regex'] : null;
        $this->container['expressions'] = isset($data['expressions']) ? $data['expressions'] : null;
        $this->container['test_examples'] = isset($data['test_examples']) ? $data['test_examples'] : null;
        $this->container['conversations'] = isset($data['conversations']) ? $data['conversations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets general_info
     *
     * @return \OpenAPI\Client\Model\Chatbot|null
     */
    public function getGeneralInfo()
    {
        return $this->container['general_info'];
    }

    /**
     * Sets general_info
     *
     * @param \OpenAPI\Client\Model\Chatbot|null $general_info general_info
     *
     * @return $this
     */
    public function setGeneralInfo($general_info)
    {
        $this->container['general_info'] = $general_info;

        return $this;
    }

    /**
     * Gets examples
     *
     * @return \OpenAPI\Client\Model\TrainingExample[]|null
     */
    public function getExamples()
    {
        return $this->container['examples'];
    }

    /**
     * Sets examples
     *
     * @param \OpenAPI\Client\Model\TrainingExample[]|null $examples examples
     *
     * @return $this
     */
    public function setExamples($examples)
    {
        $this->container['examples'] = $examples;

        return $this;
    }

    /**
     * Gets regex
     *
     * @return \OpenAPI\Client\Model\RegexFeature[]|null
     */
    public function getRegex()
    {
        return $this->container['regex'];
    }

    /**
     * Sets regex
     *
     * @param \OpenAPI\Client\Model\RegexFeature[]|null $regex regex
     *
     * @return $this
     */
    public function setRegex($regex)
    {
        $this->container['regex'] = $regex;

        return $this;
    }

    /**
     * Gets expressions
     *
     * @return \OpenAPI\Client\Model\Expression[]|null
     */
    public function getExpressions()
    {
        return $this->container['expressions'];
    }

    /**
     * Sets expressions
     *
     * @param \OpenAPI\Client\Model\Expression[]|null $expressions expressions
     *
     * @return $this
     */
    public function setExpressions($expressions)
    {
        $this->container['expressions'] = $expressions;

        return $this;
    }

    /**
     * Gets test_examples
     *
     * @return \OpenAPI\Client\Model\TestExample[]|null
     */
    public function getTestExamples()
    {
        return $this->container['test_examples'];
    }

    /**
     * Sets test_examples
     *
     * @param \OpenAPI\Client\Model\TestExample[]|null $test_examples test_examples
     *
     * @return $this
     */
    public function setTestExamples($test_examples)
    {
        $this->container['test_examples'] = $test_examples;

        return $this;
    }

    /**
     * Gets conversations
     *
     * @return \OpenAPI\Client\Model\Conversation[]|null
     */
    public function getConversations()
    {
        return $this->container['conversations'];
    }

    /**
     * Sets conversations
     *
     * @param \OpenAPI\Client\Model\Conversation[]|null $conversations conversations
     *
     * @return $this
     */
    public function setConversations($conversations)
    {
        $this->container['conversations'] = $conversations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


